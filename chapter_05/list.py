"""
리스트는 시퀀스 자료형 중 하나로
가변적이고 순서가 있다.
"""
"""
생성
"""
x = [1, 2, 3]
y = ['apple', 'banana', 'cherry', 1, [2, 3], (4, 5)]
print(x)  # [1, 2, 3]
print(y)  # ['apple', 'banana', 'cherry', 1, [2, 3], (4, 5)]

"""
원소 변경
"""
a = [1, 2, 3, 4, 5]
a[0] = 10
print(a)  # [10, 2, 3, 4, 5]

"""
덧셈과 곱셈
"""
a = [1, 2, 3, 4]
b = [5, 6, 7]
c = a + b
print(c)  # [1, 2, 3, 4, 5, 6, 7]

d = a * 2
print(d)  # [1, 2, 3, 4, 1, 2, 3, 4]

a = [1, 2, 3]
a = [a * 2] * 2
print(a)  # [[1, 2, 3, 1, 2, 3], [1, 2, 3, 1, 2, 3]]
print(id(a[0]), id(a[1]))  # 2549117809216 2549117809216

"""
슬라이싱
list[start:stop:step]
"""
a = [1, 2, 3, 4, 5]
print(a[:])  # [1, 2, 3, 4, 5]
print(a[::-1])  # [5, 4, 3, 2, 1]
print(a[::2])  # [1, 3, 5]
print(a[0:4][::-1])  # [4, 3, 2, 1]
print(a[10:20])  # [] <- 슬라이싱은 범위를 벗어나도 예외를 발생시키지 않는다.

"""
리스트 메소드
"""
# append
a = [1, 2, 3]
a.append(10)  # 리스트의 끝에 원소를 추가한다.
print(a)  # [1, 2, 3, 10]

# clear
a.clear()  # 리스트의 모든 원소를 삭제한다.
print(a)  # []

# copy
a = [1, 2, 3]
b = [a] * 2
c = b.copy()  # 리스트의 얕은 복사 -> 리스트는 새로운 객체, 내부의 원소들은 동일한 참조 주소
print(b, c, sep=' || ')  # [[1, 2, 3], [1, 2, 3]] || [[1, 2, 3], [1, 2, 3]]
print(id(b), id(c))  # 1851845524032 1851842490112 <- 리스트는 새로운 객체
print(id(b[0]), id(c[0]))  # 2146254929088 2146254929088 <- 리스트 내부의 원소 객체들은 동일
a[0] = 10
print(b, c, sep=' || ')  # [[10, 2, 3], [10, 2, 3]] || [[10, 2, 3], [10, 2, 3]] <- 리스트 내부 원소들의 참조가 이어진다.

import copy
a = [1, 2, 3]
b = [a] * 2
c = copy.deepcopy(b)  # 리스트의 깊은 복사 -> 리스트는 새로운 객체, 내부의 원소들도 새로운 참조 주소
print(b, c, sep=' || ')  # [[1, 2, 3], [1, 2, 3]] || [[1, 2, 3], [1, 2, 3]]
print(id(b), id(c))  # 1342775310912 1342772277824 <- 리스트는 새로운 객체
print(id(b[0]), id(c[0]))  # 1342775311552 1342772277888 <- 리스트 내부의 원소 객체들도 새로운 객체
a[0] = 10
print(b, c, sep=' || ')  # [[10, 2, 3], [10, 2, 3]] || [[1, 2, 3], [1, 2, 3]] <- 리스트 내부 원소들의 참조가 이어지지 않는다.

# index
a = [10, 20, 30, 10, 30]
print(a.index(10))  # 주어진 값의 첫 번째 인덱스
# print(a.index(50))  # ValueError

# insert
a.insert(2, 40)  # 특정 인덱스에 원소를 삽입
print(a)  # [10, 20, 40, 30, 10, 30]

# pop
x = a.pop(2)  # 특정 인덱스의 값을 반환하고 리스트에서 삭제
print(x, a)  # 40 [10, 20, 30, 10, 30]
x = a.pop()
print(x, a)  # 30 [10, 20, 30, 10]

# remove
a.remove(10)  # 주어진 값과 동일한 첫 번째 원소를 삭제
print(a)  # [20, 30, 10]

# reverse, reversed
a = [10, 20, 30]
b = reversed(a)
print(list(b))  # [30, 20, 10]
a.reverse()
print(a)  # [30, 20, 10]

# sort, sorted
a = [3, 5, 7, 2, 1, 0, 6]
b = sorted(a)
print(a, b, sep=' || ')  # [3, 5, 7, 2, 1, 0, 6] || [0, 1, 2, 3, 5, 6, 7]
a.sort()
print(a)  # [0, 1, 2, 3, 5, 6, 7]



